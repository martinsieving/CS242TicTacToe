package model;

/**
 * Event class
 * Models a game lifecycle, from initiating a request to
 * being declined, completed, or aborted after being accepted.
 * @author Martin Sieving
 * Clarkson University CS 242, October 2023
 */

public class Event {

    /**
     * EventStatus enum
     *  PENDING - Set when a client sends a request of type SEND_INVITATION.
     *  DECLINED - Set when a client sends a request of type DECLINE_INVITATION.
     *  ACCEPTED - Set when a client sends a request of type ACCEPT_INVITATION.
     *  PLAYING - Set when a client sends a request of type ACKNOWLEDGEMENT_RESPONSE.
     *  COMPLETED - Set when a client sends a request of type COMPLETE_GAME.
     *  ABORTED - Set when a client sends a request of type ABORT_GAME.
     */
    public enum EventStatus {
        PENDING, DECLINED, ACCEPTED, PLAYING, COMPLETED, ABORTED
    }

    /**
     * eventId is a global unique integer to represent an event.
     * Autogenerated by a central database.
     */
    private int eventId;

    /**
     * sender is a String that represents the username
     * of the user that sends the game invitation.
     */
    private String sender;

    /**
     * opponent is a String that represents the username 
     * of the user that the game invitation is sent to.
     */
    private String opponent;

    /** 
     * status is an enum EventStatus that represents the status of a game. 
     */
    private EventStatus status;

    /**
     * turn is a String of the username of the user who made the last move.
     */
    private String turn;

    /**
     * move is an integer storing the last move of the game.
     */
    private int move;

    /**
     * default constructor
     * sets sender, opponent, status, and turn to null.
     * sets eventId and move to 0.
     */
    public Event()
    {
        this.eventId = 0;
        this.sender = null;
        this.opponent = null;
        this.status = null;
        this.turn = null;
        this.move = 0;
    }

    /**
     * Constructor
     * @param eventId the integer eventId will be set to.
     * @param sender the String sender will be set to.
     * @param opponent the String opponent will be set to.
     * @param status the EventStatus status will be set to.
     * @param turn the String turn will be set to.
     * @param move the integer move will be set to.
     */
    public Event(int eventId, String sender, String opponent, EventStatus status, String turn, int move)
    {
        this.eventId = eventId;
        this.sender = sender;
        this.opponent = opponent;
        this.status = status;
        this.turn = turn;
        this.move = move;
    }

    /** 
     * @return eventId class variable, represented as an int
     */
    public int getEventId() {
        return eventId;
    }

    /** 
     * @return eventId class variable, represented as an EventStatus
     */
    public EventStatus getStatus() {
        return status;
    }

    /** 
     * @return eventId class variable, represented as an int
     */
    public int getMove() {
        return move;
    }

    /** 
     * @return eventId class variable, represented as a String
     */
    public String getOpponent() {
        return opponent;
    }

    /** 
     * @return eventId class variable, represented as a String
     */
    public String getSender() {
        return sender;
    }

    /** 
     * @return eventId class variable, represented as a String
     */
    public String getTurn() {
        return turn;
    }

    /**
     * @param eventId class variable, represented as an int
     */
    public void setEventId(int eventId) {
        this.eventId = eventId;
    }

    /**
     * @param move class variable, represented as an int
     */
    public void setMove(int move) {
        this.move = move;
    }

    /**
     * @param opponent class variable, represented as a String
     */
    public void setOpponent(String opponent) {
        this.opponent = opponent;
    }

    /**
     * @param sender class variable, represented as a String
     */
    public void setSender(String sender) {
        this.sender = sender;
    }

    /**
     * @param status class variable, represented as am EventStatus
     */
    public void setStatus(EventStatus status) {
        this.status = status;
    }

    /**
     * @param turn class variable, represented as a String
     */
    public void setTurn(String turn) {
        this.turn = turn;
    }


    /** 
     * @param otherEvent
     * @return true if this event is equal to otherEvent, using eventId as the unique variable.
     */
    public boolean equals(Event otherEvent) {
        return eventId == otherEvent.eventId;
    }
}
